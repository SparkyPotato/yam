@lang(add)
pub trait Add<Rhs = .> {
    type Output;

    fn add(self: ., rhs: Rhs) -> .Output;
}

@lang(sub)
pub trait Sub<Rhs = .> {
    type Output;

    fn sub(self: ., rhs: Rhs) -> .Output;
}

@lang(mul)
pub trait Mul<Rhs = .> {
    type Output;

    fn mul(self: ., rhs: Rhs) -> .Output;
}

@lang(div)
pub trait Div<Rhs = .> {
    type Output;

    fn div(self: ., rhs: Rhs) -> .Output;
}

@lang(rem)
pub trait Rem<Rhs = .> {
    type Output;

    fn rem(self: ., rhs: Rhs) -> .Output;
}

@lang(cast)
pub trait Cast<To> {
    fn cast(self: .) -> To;
}

pub impl<T> Cast<T> for T {
    fn cast(self: T) -> T {
        self
    }
}
