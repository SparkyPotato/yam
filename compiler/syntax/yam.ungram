//*******
// Items
//*******

File =
  Item*

TokenTree =
  ';' // Ignore, manually implemented

Attribute =
  '@' Name TokenTree?

Item =
  (Attribute)* Visibility? ItemKind

ItemKind =
  Fn
| Struct
| Enum
| TypeAlias
| Static
| Import

Fn =
  Abi? 'fn' Name ParamList RetTy? FnBody

FnBody =
  Block
| ';'

ParamList =
  '(' (Param (',' Param)* ','?)? ')'

Param =
  Name ':' Type

RetTy =
  '->' Type

Visibility =
  'pub'

Abi =
  'extern' 'string'?

Struct =
  'struct' Name '{' fields:(Param*) '}'

Enum =
  'enum' Name VariantList

VariantList =
  '{' variants:((Name (',' Name)* ','?)?) '}'

TypeAlias =
  'type' Name '=' Type ';'

Static =
  'static' Name ':' Type '=' init:Expr ';'

Import =
  'import' ImportTree ';'

ImportTree =
  ListImport
| RenameImport

RenameImport =
  (Path Rename?)

ListImport =
  (prefix:Path? '.')? Wildcard

Wildcard =
  ImportTreeList
| '*'

ImportTreeList =
  '{' (ImportTree (',' ImportTree)* ','?)? '}'

Rename =
  'as' Name

//*******
// Types
//*******

Type =
  ArrayType
| FnType
| InferType
| PathType
| PtrType

ArrayType =
  '[' Type ';' len:Expr ']'

FnType =
  Abi? 'fn' params:TyParamList RetTy?

TyParamList =
  '(' (Type (',' Type)* ','?)? ')'

InferType =
  '_'

PathType = Path

PtrType =
  '*' 'mut'? Type

//****************************
// Statements and Expressions
//****************************

Stmt =
  ';'
| SemiExpr
| Expr
| Item

SemiExpr =
  Expr ';'

Expr =
  ArrayExpr
| InfixExpr
| Block
| BreakExpr
| CallExpr
| CastExpr
| 'continue'
| FieldExpr
| ForExpr
| IfExpr
| IndexExpr
| Literal
| LoopExpr
| MatchExpr
| ParenExpr
| PathExpr
| PrefixExpr
| ReturnExpr
| WhileExpr
| LetExpr

ArrayExpr =
  '[' ArrayInit ']'

ArrayInit =
  ArrayList
| ArrayRepeat

ArrayList =
  (Expr (',' Expr)* ','?)?

ArrayRepeat =
  Expr ';' len:Expr

LetExpr =
  'let' Name (':' Type)? ('=' init:Expr)?

Block =
  '{' statements:(Stmt*) '}'

InfixExpr =
  lhs:Expr op:InfixOp rhs:Expr

InfixOp =
  '||' | '&&'
| '==' | '!=' | '<=' | '>=' | '<' | '>'
| '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'
| '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='

BreakExpr =
  'break' Expr?

CallExpr =
  Expr ArgList

CastExpr =
  Expr 'as' Type

FieldExpr =
  Expr '.' Name

ForExpr =
  'for' Name 'in' iter:Expr body:Block

IfExpr =
  'if' cond:Expr then:Block ('else' else_:Expr)?

IndexExpr =
  base:Expr '[' index:Expr ']'

Literal =
  'bool' | 'char' | 'float' | 'int' | 'string'

LoopExpr =
  'loop' body:Block ('while' Expr)?

MatchExpr =
  'match' Expr '{' arms:(MatchArm*) '}'

MatchArm =
  value:Expr '=>' then:Expr ','?

ParenExpr =
  '(' Expr ')'

PathExpr =
  Path

RefExpr =
  '&' 'mut'? Expr

PrefixExpr =
  op:PrefixOp Expr

PrefixOp =
  '-' | '!' | '*'

ReturnExpr =
  'return' Expr?

WhileExpr =
  'while' Expr body:Block

ArgList =
  '(' (Expr (',' Expr)* ','?)? ')'

//****************
// Names and Paths
//****************

Path =
  scope:'.'? qualifier:(PathSegment*) end:Name

PathSegment =
  Name '.'

Name =
  'ident'
